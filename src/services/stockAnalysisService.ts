import { SimplizeService, SimplizeReport } from './simplizeService';
import { PDFService } from './pdfService';
import { OpenAIService } from './openaiService';
import { PriceDataService } from './priceDataService';
import { STOCK_ANALYSIS_SYSTEM_PROMPT, buildAnalysisUserPrompt } from '../prompts/stockAnalysisPrompt';
import { CONFIG } from '../config/constants';

export interface StockAnalysisResult {
  success: true;
  ticker: string;
  analysis: string;
  reports: SimplizeReport[];
  totalReports: number;
  usage?: any;
}

export class StockAnalysisService {
  /**
   * Ph√¢n t√≠ch t·ªïng h·ª£p c·ªï phi·∫øu t·ª´ nhi·ªÅu b√°o c√°o
   */
  static async analyzeStock(
    ticker: string,
    numberOfReports: number = CONFIG.MAX_REPORTS_TO_ANALYZE,
    model?: string
  ): Promise<StockAnalysisResult> {
    try {
      console.log(`\n=== Starting stock analysis for ${ticker} ===`);
      
      // B∆∞·ªõc 1: L·∫•y b√°o c√°o t·ª´ Simplize
      console.log(`Step 1: Fetching ${numberOfReports} latest reports...`);
      const reports = await SimplizeService.getLatestReports(ticker, numberOfReports);
      console.log(`‚úì Found ${reports.length} reports`);

      // B∆∞·ªõc 2: T·∫£i v√† ƒë·ªçc t·∫•t c·∫£ PDF
      console.log(`Step 2: Downloading and extracting ${reports.length} PDFs...`);
      const pdfUrls = reports.map(report => report.attachedLink);
      const pdfContents = await PDFService.extractMultiplePdfs(pdfUrls);
      console.log(`‚úì Extracted ${pdfContents.length} PDFs`);

      // B∆∞·ªõc 3: T·∫°o prompt t·ªïng h·ª£p CHI TI·∫æT
      console.log(`Step 3: Building comprehensive analysis prompt...`);
      const userPrompt = buildAnalysisUserPrompt(ticker, reports, pdfContents);
      console.log(`‚úì Prompt length: ${userPrompt.length} characters`);

      // B∆∞·ªõc 4: G·ª≠i t·ªõi AI ƒë·ªÉ ph√¢n t√≠ch CHI TI·∫æT
      console.log(`Step 4: Sending to AI for detailed analysis (max ${CONFIG.MAX_TOKENS} tokens)...`);
      const aiResponse = await OpenAIService.chatCompletion(
        [
          {
            role: 'system',
            content: STOCK_ANALYSIS_SYSTEM_PROMPT
          },
          {
            role: 'user',
            content: userPrompt + '\n\nL∆ØU √ù QUAN TR·ªåNG:\n- CH·ªà ph√¢n t√≠ch nh·ªØng g√¨ c√≥ trong b√°o c√°o\n- KH√îNG b·ªãa ƒë·∫∑t th√¥ng tin\n- ƒê·ªô d√†i: 500-700 t·ª´\n- T·∫≠p trung v√†o c√°c √Ω CH√çNH'
          }
        ],
        model,
        {
          temperature: CONFIG.TEMPERATURE,
          max_tokens: CONFIG.MAX_TOKENS
        }
      );
      console.log(`‚úì AI analysis completed`);
      console.log(`=== Comprehensive analysis completed for ${ticker} ===\n`);

      return {
        success: true,
        ticker: ticker.toUpperCase(),
        analysis: aiResponse.message,
        reports: reports,
        totalReports: reports.length,
        usage: aiResponse.usage
      };

    } catch (error: any) {
      console.error('StockAnalysisService.analyzeStock error:', error.message);
      throw error;
    }
  }

  /**
   * Ph√¢n t√≠ch cho smart chat v·ªõi 5 b√°o c√°o ƒë∆∞·ª£c l·ªçc theo th·ªùi gian
   */
  static async smartAnalyze(
    ticker: string,
    userQuestion: string,
    model?: string
  ): Promise<{ analysis: string; reports: any[]; totalReports: number; usage?: any }> {
    try {
      console.log(`\n=== Smart analysis for ${ticker} ===`);
      
      // L·∫•y 5 b√°o c√°o g·∫ßn nh·∫•t v√† l·ªçc theo th·ªùi gian (60 ng√†y)
      console.log(`Step 1: Fetching 5 latest reports (within ${CONFIG.MAX_REPORT_AGE_DAYS} days)...`);
      const reports = await SimplizeService.getValidReports(ticker, 5, CONFIG.MAX_REPORT_AGE_DAYS);
      console.log(`‚úì Found ${reports.length} valid reports`);

      // L·∫•y d·ªØ li·ªáu gi√° t·ª´ IQX
      console.log(`Step 1.5: Fetching price data from IQX...`);
      let priceDataText = '';
      try {
        priceDataText = await PriceDataService.getPriceDataForAnalysis([ticker]);
        console.log(`‚úì Price data fetched successfully`);
      } catch (error: any) {
        console.log(`‚ö†Ô∏è Could not fetch price data: ${error.message}`);
        priceDataText = `‚ö†Ô∏è D·ªØ li·ªáu gi√° kh√¥ng kh·∫£ d·ª•ng\n\n`;
      }

      // T·∫£i v√† ƒë·ªçc t·∫•t c·∫£ PDF
      console.log(`Step 2: Downloading and extracting ${reports.length} PDFs...`);
      const pdfUrls = reports.map(report => report.attachedLink);
      const pdfContents = await PDFService.extractMultiplePdfs(pdfUrls);
      console.log(`‚úì Extracted ${pdfContents.length} PDFs`);

      // T·∫°o context t·ªïng h·ª£p CHI TI·∫æT t·ª´ 5 b√°o c√°o
      console.log(`Step 3: Building comprehensive analysis context...`);
      const systemPrompt = `B·∫°n l√† chuy√™n gia ph√¢n t√≠ch ch·ª©ng kho√°n Vi·ªát Nam. 
B·∫°n v·ª´a ƒë·ªçc ${reports.length} b√°o c√°o ph√¢n t√≠ch g·∫ßn nh·∫•t (trong v√≤ng 60 ng√†y) v·ªÅ m√£ ${ticker}.
H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n t·ªïng h·ª£p c√°c b√°o c√°o n√†y.

Y√äU C·∫¶U QUAN TR·ªåNG:
- CH·ªà n√™u nh·ªØng g√¨ c√≥ trong b√°o c√°o, kh√¥ng b·ªãa ƒë·∫∑t
- T·∫≠p trung v√†o: K·∫øt qu·∫£ KD, tri·ªÉn v·ªçng, ƒë·ªãnh gi√°, khuy·∫øn ngh·ªã
- So s√°nh quan ƒëi·ªÉm c√°c b√°o c√°o (n·∫øu kh√°c nhau)
- ƒê·ªô d√†i: 500-700 t·ª´ (ng·∫Øn g·ªçn, s√∫c t√≠ch)
- S·ª≠ d·ª•ng Markdown, emoji ƒë·ªÉ d·ªÖ ƒë·ªçc

L∆∞u √Ω: T·∫•t c·∫£ th√¥ng tin xem nh∆∞ t·ª´ IQX t·ªïng h·ª£p, kh√¥ng nh·∫Øc ngu·ªìn c·ª• th·ªÉ.`;

      let context = `# T·ªîNG H·ª¢P ${reports.length} B√ÅO C√ÅO PH√ÇN T√çCH G·∫¶N NH·∫§T V·ªÄ ${ticker}\n\n`;
      
      // T·ªïng h·ª£p th√¥ng tin t·ªïng quan
      context += `## üìä Th√¥ng tin t·ªïng quan\n`;
      context += `- T·ªïng s·ªë b√°o c√°o ph√¢n t√≠ch: ${reports.length}\n`;
      const buyCount = reports.filter(r => r.recommend.includes('MUA')).length;
      const holdCount = reports.filter(r => r.recommend.includes('GI·ªÆ') || r.recommend.includes('L·∫¨P')).length;
      const sellCount = reports.filter(r => r.recommend.includes('B√ÅN')).length;
      context += `- Khuy·∫øn ngh·ªã: MUA (${buyCount}), N·∫ÆM GI·ªÆ (${holdCount}), B√ÅN (${sellCount})\n`;
      
      const avgPrice = reports
        .filter(r => r.targetPrice)
        .reduce((sum, r) => sum + (r.targetPrice || 0), 0) / 
        reports.filter(r => r.targetPrice).length;
      if (avgPrice) {
        context += `- Gi√° m·ª•c ti√™u trung b√¨nh: ${Math.round(avgPrice).toLocaleString()} VNƒê\n`;
      }
      context += `\n${'='.repeat(80)}\n\n`;
      
      // Chi ti·∫øt t·ª´ng b√°o c√°o v·ªõi nhi·ªÅu n·ªôi dung h∆°n
      reports.forEach((report, index) => {
        context += `## üìÑ B√°o c√°o ${index + 1}\n`;
        context += `- **Ti√™u ƒë·ªÅ:** ${report.title}\n`;
        context += `- **Ng√†y ph√°t h√†nh:** ${report.issueDate}\n`;
        context += `- **Khuy·∫øn ngh·ªã:** ${report.recommend}\n`;
        context += `- **Gi√° m·ª•c ti√™u:** ${report.targetPrice ? report.targetPrice.toLocaleString() + ' VNƒê' : 'N/A'}\n\n`;
        context += `### N·ªôi dung chi ti·∫øt:\n${pdfContents[index].substring(0, 8000)}\n\n`;
        context += `${'='.repeat(80)}\n\n`;
      });

      context += `\n**C√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng:** ${userQuestion}\n\n`;
      context += `**Y√äU C·∫¶U:** CH·ªà ph√¢n t√≠ch nh·ªØng g√¨ c√≥ trong b√°o c√°o. Kh√¥ng b·ªãa th√™m. ƒê·ªô d√†i: 500-700 t·ª´.`;

      console.log(`‚úì Context length: ${context.length} characters`);

      // G·ª≠i t·ªõi AI ƒë·ªÉ ph√¢n t√≠ch CHI TI·∫æT
      console.log(`Step 4: Sending to AI for detailed analysis (max ${CONFIG.MAX_TOKENS} tokens)...`);
      const aiResponse = await OpenAIService.simpleChat(context, systemPrompt, model);
      console.log(`‚úì AI analysis completed`);
      console.log(`=== Smart analysis completed for ${ticker} ===\n`);

      return {
        analysis: aiResponse.message,
        reports: reports.map(r => ({
          title: r.title,
          source: r.source,
          issueDate: r.issueDate,
          recommend: r.recommend,
          targetPrice: r.targetPrice,
          pdfLink: r.attachedLink
        })),
        totalReports: reports.length,
        usage: aiResponse.usage
      };

    } catch (error: any) {
      console.error('StockAnalysisService.smartAnalyze error:', error.message);
      throw error;
    }
  }
}

