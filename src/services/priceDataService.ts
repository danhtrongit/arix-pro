import axios from 'axios';

export interface OHLCData {
  symbol: string;
  o: number[]; // Open prices
  h: number[]; // High prices
  l: number[]; // Low prices
  c: number[]; // Close prices
  v: number[]; // Volumes
  t: string[]; // Timestamps
  accumulatedVolume: number[];
  accumulatedValue: number[];
  minBatchTruncTime: string;
}

export interface PriceDataSummary {
  symbol: string;
  latestPrice: number;
  priceChange: number;
  priceChangePercent: number;
  highestPrice: number;
  lowestPrice: number;
  totalVolume: number;
  averageVolume: number;
  priceRange: string;
  trend: string;
  dataPoints: number;
}

export class PriceDataService {
  private static readonly API_URL = 'https://proxy.iqx.vn/proxy/trading/api/chart/OHLCChart/gap-chart';

  /**
   * L·∫•y d·ªØ li·ªáu OHLC t·ª´ IQX API
   * @param symbols M·∫£ng m√£ c·ªï phi·∫øu
   * @param countBack S·ªë ƒëi·ªÉm d·ªØ li·ªáu (m·∫∑c ƒë·ªãnh: s·ªë symbol * 60)
   * @returns M·∫£ng d·ªØ li·ªáu OHLC
   */
  static async getOHLCData(
    symbols: string[],
    countBack?: number
  ): Promise<OHLCData[]> {
    try {
      // T√≠nh timestamp 7h s√°ng h√¥m nay
      const now = new Date();
      const today7AM = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 7, 0, 0);
      const toTimestamp = Math.floor(today7AM.getTime() / 1000);

      // N·∫øu kh√¥ng c√≥ countBack, t√≠nh theo s·ªë symbol * 60
      const finalCountBack = countBack || symbols.length * 60;

      const requestBody = {
        timeFrame: 'ONE_DAY',
        symbols: symbols,
        to: toTimestamp,
        countBack: finalCountBack
      };

      console.log(`üìà Fetching price data for ${symbols.join(', ')}...`);
      console.log(`   Request:`, JSON.stringify(requestBody, null, 2));

      const response = await axios.post<OHLCData[]>(this.API_URL, requestBody, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });

      console.log(`‚úì Received price data for ${response.data.length} symbols`);
      return response.data;

    } catch (error: any) {
      console.error('PriceDataService.getOHLCData error:', error.message);
      throw new Error(`Failed to fetch price data: ${error.message}`);
    }
  }

  /**
   * Ph√¢n t√≠ch v√† t√≥m t·∫Øt d·ªØ li·ªáu gi√°
   */
  static analyzePriceData(ohlcData: OHLCData): PriceDataSummary {
    const { symbol, o, h, l, c, v, t } = ohlcData;

    if (c.length === 0) {
      throw new Error(`No price data available for ${symbol}`);
    }

    // Gi√° m·ªõi nh·∫•t
    const latestPrice = c[c.length - 1];
    const oldestPrice = c[0];

    // Thay ƒë·ªïi gi√°
    const priceChange = latestPrice - oldestPrice;
    const priceChangePercent = (priceChange / oldestPrice) * 100;

    // Gi√° cao nh·∫•t v√† th·∫•p nh·∫•t
    const highestPrice = Math.max(...h);
    const lowestPrice = Math.min(...l);

    // T·ªïng v√† trung b√¨nh volume
    const totalVolume = v.reduce((sum, vol) => sum + vol, 0);
    const averageVolume = totalVolume / v.length;

    // Xu h∆∞·ªõng
    let trend = 'Sideway';
    if (priceChangePercent > 2) trend = 'TƒÉng m·∫°nh';
    else if (priceChangePercent > 0.5) trend = 'TƒÉng nh·∫π';
    else if (priceChangePercent < -2) trend = 'Gi·∫£m m·∫°nh';
    else if (priceChangePercent < -0.5) trend = 'Gi·∫£m nh·∫π';

    return {
      symbol,
      latestPrice,
      priceChange,
      priceChangePercent,
      highestPrice,
      lowestPrice,
      totalVolume,
      averageVolume,
      priceRange: `${lowestPrice.toLocaleString()} - ${highestPrice.toLocaleString()}`,
      trend,
      dataPoints: c.length
    };
  }

  /**
   * T·∫°o text m√¥ t·∫£ d·ªØ li·ªáu gi√° cho AI
   */
  static formatPriceDataForAnalysis(ohlcData: OHLCData): string {
    const summary = this.analyzePriceData(ohlcData);
    const { symbol, o, h, l, c, v, t } = ohlcData;

    let text = `## üìä D·ªÆ LI·ªÜU GI√Å C·ªî PHI·∫æU ${symbol}\n\n`;
    
    // Th√¥ng tin t√≥m t·∫Øt
    text += `### T√≥m t·∫Øt (${summary.dataPoints} ng√†y giao d·ªãch g·∫ßn nh·∫•t)\n`;
    text += `- **Gi√° hi·ªán t·∫°i:** ${summary.latestPrice.toLocaleString()} VNƒê\n`;
    text += `- **Thay ƒë·ªïi:** ${summary.priceChange > 0 ? '+' : ''}${summary.priceChange.toLocaleString()} VNƒê (${summary.priceChangePercent > 0 ? '+' : ''}${summary.priceChangePercent.toFixed(2)}%)\n`;
    text += `- **Xu h∆∞·ªõng:** ${summary.trend}\n`;
    text += `- **Bi√™n ƒë·ªô gi√°:** ${summary.priceRange} VNƒê\n`;
    text += `- **Gi√° cao nh·∫•t:** ${summary.highestPrice.toLocaleString()} VNƒê\n`;
    text += `- **Gi√° th·∫•p nh·∫•t:** ${summary.lowestPrice.toLocaleString()} VNƒê\n`;
    text += `- **Volume trung b√¨nh:** ${Math.round(summary.averageVolume).toLocaleString()} CP\n`;
    text += `- **T·ªïng volume:** ${Math.round(summary.totalVolume).toLocaleString()} CP\n\n`;

    // Chi ti·∫øt t·ª´ng ng√†y (5 ng√†y g·∫ßn nh·∫•t)
    const recentDays = Math.min(5, c.length);
    text += `### Chi ti·∫øt ${recentDays} phi√™n giao d·ªãch g·∫ßn nh·∫•t\n`;
    text += `| Ng√†y | M·ªü c·ª≠a | Cao nh·∫•t | Th·∫•p nh·∫•t | ƒê√≥ng c·ª≠a | Thay ƒë·ªïi | Volume |\n`;
    text += `|------|--------|----------|-----------|----------|----------|--------|\n`;

    for (let i = c.length - recentDays; i < c.length; i++) {
      const date = new Date(parseInt(t[i]) * 1000).toLocaleDateString('vi-VN');
      const change = i > 0 ? c[i] - c[i - 1] : 0;
      const changePercent = i > 0 ? ((change / c[i - 1]) * 100).toFixed(2) : '0.00';
      const changeStr = change > 0 ? `+${change.toLocaleString()}` : change.toLocaleString();
      
      text += `| ${date} | ${o[i].toLocaleString()} | ${h[i].toLocaleString()} | ${l[i].toLocaleString()} | ${c[i].toLocaleString()} | ${changeStr} (${changePercent}%) | ${v[i].toLocaleString()} |\n`;
    }

    text += `\n`;

    return text;
  }

  /**
   * L·∫•y v√† format d·ªØ li·ªáu gi√° cho nhi·ªÅu m√£ c·ªï phi·∫øu
   */
  static async getPriceDataForAnalysis(symbols: string[]): Promise<string> {
    try {
      const ohlcDataArray = await this.getOHLCData(symbols);
      
      let combinedText = `# üìà D·ªÆ LI·ªÜU GI√Å TH·ªä TR∆Ø·ªúNG\n\n`;
      
      ohlcDataArray.forEach(ohlcData => {
        combinedText += this.formatPriceDataForAnalysis(ohlcData);
        combinedText += `\n${'='.repeat(80)}\n\n`;
      });

      return combinedText;

    } catch (error: any) {
      console.error('Error getting price data for analysis:', error.message);
      return `‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu gi√°: ${error.message}\n\n`;
    }
  }
}

